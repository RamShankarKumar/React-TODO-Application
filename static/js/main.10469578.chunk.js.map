{"version":3,"sources":["TODOForm.js","Item.js","ItemList.js","App.js","reportWebVitals.js","index.js"],"names":["TODOForm","props","state","newTask","handleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","newlist","id","uuidv4","completed","createList","className","onSubmit","type","placeholder","onChange","Component","Item","isEditing","updatedTask","newList","handleRemove","toggleForm","handleUpdate","handleToggle","removeItem","updateItem","toggleItem","onClick","class","ItemList","todoList","create","remove","update","toggleCompletion","filter","item","updatedTodos","map","todo","itemlist","lists","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10469578.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './TODOForm.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass TODOForm extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { newTask : \"\"};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        if(this.state.newTask !== \"\"){  // if there is no task added and we are clicking add button then this condition will stop from creating a blank task\r\n            const newlist = {...this.state, id:uuidv4(), completed : false};\r\n            this.props.createList(newlist)\r\n            this.setState({\r\n                newTask : \"\"\r\n            });\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <form className='Todo-form' onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"New Todo\"\r\n                        id=\"newTask\"\r\n                        name=\"newTask\" // we need to keep the same name as we given in state.\r\n                        value={this.state.newTask}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <button>Add Todo</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TODOForm;","import React, {Component} from 'react';\r\nimport './Item.css';\r\n\r\nclass Item extends Component{\r\n    constructor(props){\r\n        super(props); // here we can see the usecase of this props with super keyword. \r\n        this.state = {\r\n            isEditing : false,\r\n            updatedTask : this.props.newList // just because we have used super(props), we are able to access props.newList in the state.\r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleToggle = this.handleToggle.bind(this);\r\n    }\r\n\r\n    handleRemove(){\r\n        this.props.removeItem(this.props.id);\r\n    }\r\n\r\n    toggleForm(){\r\n        this.setState({\r\n            isEditing : !this.state.isEditing\r\n        })\r\n    }\r\n\r\n    handleUpdate(evt){\r\n        evt.preventDefault();\r\n        // take new task data and pass up to parent\r\n        this.props.updateItem(this.props.id, this.state.updatedTask);\r\n        this.toggleForm();\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n\r\n    handleToggle(evt){\r\n        this.props.toggleItem(this.props.id);\r\n    }\r\n\r\n    render(){\r\n        let result;\r\n        if(this.state.isEditing){\r\n            result = (\r\n                <div>\r\n                    <form className='Item-edit-form' onSubmit={this.handleUpdate}>\r\n                        <input type='text' value={this.state.updatedTask} name='updatedTask' onChange={this.handleChange}/>\r\n                        <button>Save</button>\r\n                    </form>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            result = (\r\n                <div className='Item'>\r\n                    <li className={this.props.completed ? 'Item-task completed' : \"Item-task\"} onClick={this.handleToggle}>{this.props.newList}</li>\r\n                    <div className='Item-buttons'>\r\n                        <button onClick={this.toggleForm}>\r\n                            <i class='fas fa-pen' />\r\n                        </button>\r\n                        <button onClick={this.handleRemove}>\r\n                            <i class='fas fa-trash' />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Item;","import React, {Component} from 'react';\r\nimport './ItemList.css';\r\nimport TODOForm from './TODOForm';\r\nimport Item from './Item';\r\n\r\nclass ItemList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {todoList : []}\r\n        this.create = this.create.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.toggleCompletion = this.toggleCompletion.bind(this);\r\n    }\r\n\r\n    create(newList){\r\n        this.setState({\r\n            todoList : [...this.state.todoList, newList]\r\n        });\r\n    }\r\n\r\n    remove(id){\r\n        this.setState({\r\n            todoList: this.state.todoList.filter(item => item.id !== id)\r\n        })\r\n    }\r\n\r\n    update(id,updatedTask){\r\n        const updatedTodos = this.state.todoList.map(todo => {\r\n            if(todo.id === id){\r\n                return {...todo, newTask: updatedTask}\r\n            }\r\n            return todo;\r\n        })\r\n        this.setState({\r\n            todoList : updatedTodos\r\n        })\r\n    }\r\n\r\n    toggleCompletion(id){\r\n        const updatedTodos = this.state.todoList.map(todo => {\r\n            if(todo.id === id){\r\n                return {...todo, completed: !todo.completed}\r\n            }\r\n            return todo;\r\n        })\r\n        this.setState({\r\n            todoList : updatedTodos\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const itemlist = this.state.todoList.map(lists => (\r\n            <Item\r\n                newList={lists.newTask}\r\n                key={lists.id}\r\n                id={lists.id}\r\n                completed={lists.completed}\r\n                removeItem={this.remove}\r\n                updateItem={this.update}\r\n                toggleItem = {this.toggleCompletion}\r\n            />\r\n        ));\r\n\r\n        console.log(itemlist);\r\n\r\n        return(\r\n            <div className='ItemList'>\r\n                <h1>\r\n                    Todo lists <span>Simple React Todo List App</span>\r\n                </h1>\r\n                <ul>{itemlist}</ul>\r\n                <TODOForm createList={this.create}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemList;","import React,{Component} from 'react';\nimport './App.css';\nimport ItemList from './ItemList.js';\n\nclass App extends Component{\n  render(){\n    return (\n      <div className=\"App\">\n        <ItemList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}